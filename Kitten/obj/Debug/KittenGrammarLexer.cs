//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ddong\Documents\Visual Studio 2015\Projects\Kitten\Kitten\KittenGrammar.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Kitten {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class KittenGrammarLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, IntegerLiteral=30, BooleanLiteral=31, 
		StringLiteral=32, ID=33, WS=34;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "IntegerLiteral", "BooleanLiteral", 
		"StringLiteral", "ESC", "ID", "WS"
	};


	public KittenGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "'while'", "'('", "')'", "'if'", "'else'", "'for'", 
		"';'", "'*'", "'/'", "'+'", "'-'", "'not'", "'!'", "'=='", "'>='", "'<='", 
		"'!='", "'>'", "'<'", "'and'", "'or'", "'&&'", "'||'", "'['", "'}'", "'{'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "IntegerLiteral", "BooleanLiteral", 
		"StringLiteral", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KittenGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2$\xC3\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3"+
		"\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x6\x1F\x9C\n\x1F\r\x1F"+
		"\xE\x1F\x9D\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \xA9\n \x3!\x3!\x3"+
		"!\a!\xAE\n!\f!\xE!\xB1\v!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x5\"\xB9\n\"\x3"+
		"#\x6#\xBC\n#\r#\xE#\xBD\x3$\x3$\x3$\x3$\x3\xAF\x2\x2%\x3\x2\x3\x5\x2\x4"+
		"\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17"+
		"\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14"+
		"\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2"+
		"\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2\x2\x45\x2"+
		"#G\x2$\x3\x2\x5\x3\x2\x32;\x4\x2\x43\\\x63|\x5\x2\v\f\xF\xF\"\"\xC7\x2"+
		"\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2"+
		"\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2"+
		"\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2"+
		"\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2"+
		"\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2"+
		"\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2"+
		"\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x3I\x3\x2\x2\x2\x5M\x3\x2\x2\x2\a"+
		"O\x3\x2\x2\x2\tU\x3\x2\x2\x2\vW\x3\x2\x2\x2\rY\x3\x2\x2\x2\xF\\\x3\x2"+
		"\x2\x2\x11\x61\x3\x2\x2\x2\x13\x65\x3\x2\x2\x2\x15g\x3\x2\x2\x2\x17i\x3"+
		"\x2\x2\x2\x19k\x3\x2\x2\x2\x1Bm\x3\x2\x2\x2\x1Do\x3\x2\x2\x2\x1Fs\x3\x2"+
		"\x2\x2!u\x3\x2\x2\x2#x\x3\x2\x2\x2%{\x3\x2\x2\x2\'~\x3\x2\x2\x2)\x81\x3"+
		"\x2\x2\x2+\x83\x3\x2\x2\x2-\x85\x3\x2\x2\x2/\x89\x3\x2\x2\x2\x31\x8C\x3"+
		"\x2\x2\x2\x33\x8F\x3\x2\x2\x2\x35\x92\x3\x2\x2\x2\x37\x94\x3\x2\x2\x2"+
		"\x39\x96\x3\x2\x2\x2;\x98\x3\x2\x2\x2=\x9B\x3\x2\x2\x2?\xA8\x3\x2\x2\x2"+
		"\x41\xAA\x3\x2\x2\x2\x43\xB8\x3\x2\x2\x2\x45\xBB\x3\x2\x2\x2G\xBF\x3\x2"+
		"\x2\x2IJ\ax\x2\x2JK\a\x63\x2\x2KL\at\x2\x2L\x4\x3\x2\x2\x2MN\a?\x2\x2"+
		"N\x6\x3\x2\x2\x2OP\ay\x2\x2PQ\aj\x2\x2QR\ak\x2\x2RS\an\x2\x2ST\ag\x2\x2"+
		"T\b\x3\x2\x2\x2UV\a*\x2\x2V\n\x3\x2\x2\x2WX\a+\x2\x2X\f\x3\x2\x2\x2YZ"+
		"\ak\x2\x2Z[\ah\x2\x2[\xE\x3\x2\x2\x2\\]\ag\x2\x2]^\an\x2\x2^_\au\x2\x2"+
		"_`\ag\x2\x2`\x10\x3\x2\x2\x2\x61\x62\ah\x2\x2\x62\x63\aq\x2\x2\x63\x64"+
		"\at\x2\x2\x64\x12\x3\x2\x2\x2\x65\x66\a=\x2\x2\x66\x14\x3\x2\x2\x2gh\a"+
		",\x2\x2h\x16\x3\x2\x2\x2ij\a\x31\x2\x2j\x18\x3\x2\x2\x2kl\a-\x2\x2l\x1A"+
		"\x3\x2\x2\x2mn\a/\x2\x2n\x1C\x3\x2\x2\x2op\ap\x2\x2pq\aq\x2\x2qr\av\x2"+
		"\x2r\x1E\x3\x2\x2\x2st\a#\x2\x2t \x3\x2\x2\x2uv\a?\x2\x2vw\a?\x2\x2w\""+
		"\x3\x2\x2\x2xy\a@\x2\x2yz\a?\x2\x2z$\x3\x2\x2\x2{|\a>\x2\x2|}\a?\x2\x2"+
		"}&\x3\x2\x2\x2~\x7F\a#\x2\x2\x7F\x80\a?\x2\x2\x80(\x3\x2\x2\x2\x81\x82"+
		"\a@\x2\x2\x82*\x3\x2\x2\x2\x83\x84\a>\x2\x2\x84,\x3\x2\x2\x2\x85\x86\a"+
		"\x63\x2\x2\x86\x87\ap\x2\x2\x87\x88\a\x66\x2\x2\x88.\x3\x2\x2\x2\x89\x8A"+
		"\aq\x2\x2\x8A\x8B\at\x2\x2\x8B\x30\x3\x2\x2\x2\x8C\x8D\a(\x2\x2\x8D\x8E"+
		"\a(\x2\x2\x8E\x32\x3\x2\x2\x2\x8F\x90\a~\x2\x2\x90\x91\a~\x2\x2\x91\x34"+
		"\x3\x2\x2\x2\x92\x93\a]\x2\x2\x93\x36\x3\x2\x2\x2\x94\x95\a\x7F\x2\x2"+
		"\x95\x38\x3\x2\x2\x2\x96\x97\a}\x2\x2\x97:\x3\x2\x2\x2\x98\x99\a.\x2\x2"+
		"\x99<\x3\x2\x2\x2\x9A\x9C\t\x2\x2\x2\x9B\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2"+
		"\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E>\x3\x2\x2\x2\x9F\xA0"+
		"\av\x2\x2\xA0\xA1\at\x2\x2\xA1\xA2\aw\x2\x2\xA2\xA9\ag\x2\x2\xA3\xA4\a"+
		"h\x2\x2\xA4\xA5\a\x63\x2\x2\xA5\xA6\an\x2\x2\xA6\xA7\au\x2\x2\xA7\xA9"+
		"\ag\x2\x2\xA8\x9F\x3\x2\x2\x2\xA8\xA3\x3\x2\x2\x2\xA9@\x3\x2\x2\x2\xAA"+
		"\xAF\a$\x2\x2\xAB\xAE\x5\x43\"\x2\xAC\xAE\v\x2\x2\x2\xAD\xAB\x3\x2\x2"+
		"\x2\xAD\xAC\x3\x2\x2\x2\xAE\xB1\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xAF\xAD"+
		"\x3\x2\x2\x2\xB0\xB2\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2\xB3\a$\x2\x2"+
		"\xB3\x42\x3\x2\x2\x2\xB4\xB5\a^\x2\x2\xB5\xB9\a$\x2\x2\xB6\xB7\a^\x2\x2"+
		"\xB7\xB9\a^\x2\x2\xB8\xB4\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\x44\x3\x2"+
		"\x2\x2\xBA\xBC\t\x3\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD"+
		"\xBB\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\x46\x3\x2\x2\x2\xBF\xC0\t\x4"+
		"\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\b$\x2\x2\xC2H\x3\x2\x2\x2\t\x2\x9D"+
		"\xA8\xAD\xAF\xB8\xBD\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Kitten
