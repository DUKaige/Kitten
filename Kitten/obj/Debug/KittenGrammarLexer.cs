//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\ddong\Documents\Visual Studio 2015\Projects\Kitten\Kitten\KittenGrammar.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Kitten {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class KittenGrammarLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, IntegerLiteral=24, 
		BooleanLiteral=25, StringLiteral=26, ID=27, WS=28;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "IntegerLiteral", 
		"BooleanLiteral", "StringLiteral", "ESC", "ID", "WS"
	};


	public KittenGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "'while'", "'('", "')'", "'if'", "'else'", "'for'", 
		"';'", "'*'", "'/'", "'+'", "'-'", "'=='", "'>='", "'<='", "'!='", "'>'", 
		"'<'", "'['", "'}'", "'{'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"IntegerLiteral", "BooleanLiteral", "StringLiteral", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KittenGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1E\xA4\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x19\x6\x19}\n\x19\r\x19\xE\x19~\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x8A\n\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\a\x1B\x8F\n\x1B\f\x1B\xE\x1B\x92\v\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\x9A\n\x1C\x3\x1D\x6\x1D\x9D\n\x1D\r\x1D\xE\x1D\x9E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x90\x2\x2\x1F\x3\x2\x3\x5\x2\x4\a\x2\x5"+
		"\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19"+
		"\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15"+
		")\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37"+
		"\x2\x2\x39\x2\x1D;\x2\x1E\x3\x2\x5\x3\x2\x32;\x4\x2\x43\\\x63|\x5\x2\v"+
		"\f\xF\xF\"\"\xA8\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2"+
		"\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2"+
		"\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2"+
		"\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F"+
		"\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2"+
		"\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2"+
		"\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x39\x3\x2"+
		"\x2\x2\x2;\x3\x2\x2\x2\x3=\x3\x2\x2\x2\x5\x41\x3\x2\x2\x2\a\x43\x3\x2"+
		"\x2\x2\tI\x3\x2\x2\x2\vK\x3\x2\x2\x2\rM\x3\x2\x2\x2\xFP\x3\x2\x2\x2\x11"+
		"U\x3\x2\x2\x2\x13Y\x3\x2\x2\x2\x15[\x3\x2\x2\x2\x17]\x3\x2\x2\x2\x19_"+
		"\x3\x2\x2\x2\x1B\x61\x3\x2\x2\x2\x1D\x63\x3\x2\x2\x2\x1F\x66\x3\x2\x2"+
		"\x2!i\x3\x2\x2\x2#l\x3\x2\x2\x2%o\x3\x2\x2\x2\'q\x3\x2\x2\x2)s\x3\x2\x2"+
		"\x2+u\x3\x2\x2\x2-w\x3\x2\x2\x2/y\x3\x2\x2\x2\x31|\x3\x2\x2\x2\x33\x89"+
		"\x3\x2\x2\x2\x35\x8B\x3\x2\x2\x2\x37\x99\x3\x2\x2\x2\x39\x9C\x3\x2\x2"+
		"\x2;\xA0\x3\x2\x2\x2=>\ax\x2\x2>?\a\x63\x2\x2?@\at\x2\x2@\x4\x3\x2\x2"+
		"\x2\x41\x42\a?\x2\x2\x42\x6\x3\x2\x2\x2\x43\x44\ay\x2\x2\x44\x45\aj\x2"+
		"\x2\x45\x46\ak\x2\x2\x46G\an\x2\x2GH\ag\x2\x2H\b\x3\x2\x2\x2IJ\a*\x2\x2"+
		"J\n\x3\x2\x2\x2KL\a+\x2\x2L\f\x3\x2\x2\x2MN\ak\x2\x2NO\ah\x2\x2O\xE\x3"+
		"\x2\x2\x2PQ\ag\x2\x2QR\an\x2\x2RS\au\x2\x2ST\ag\x2\x2T\x10\x3\x2\x2\x2"+
		"UV\ah\x2\x2VW\aq\x2\x2WX\at\x2\x2X\x12\x3\x2\x2\x2YZ\a=\x2\x2Z\x14\x3"+
		"\x2\x2\x2[\\\a,\x2\x2\\\x16\x3\x2\x2\x2]^\a\x31\x2\x2^\x18\x3\x2\x2\x2"+
		"_`\a-\x2\x2`\x1A\x3\x2\x2\x2\x61\x62\a/\x2\x2\x62\x1C\x3\x2\x2\x2\x63"+
		"\x64\a?\x2\x2\x64\x65\a?\x2\x2\x65\x1E\x3\x2\x2\x2\x66g\a@\x2\x2gh\a?"+
		"\x2\x2h \x3\x2\x2\x2ij\a>\x2\x2jk\a?\x2\x2k\"\x3\x2\x2\x2lm\a#\x2\x2m"+
		"n\a?\x2\x2n$\x3\x2\x2\x2op\a@\x2\x2p&\x3\x2\x2\x2qr\a>\x2\x2r(\x3\x2\x2"+
		"\x2st\a]\x2\x2t*\x3\x2\x2\x2uv\a\x7F\x2\x2v,\x3\x2\x2\x2wx\a}\x2\x2x."+
		"\x3\x2\x2\x2yz\a.\x2\x2z\x30\x3\x2\x2\x2{}\t\x2\x2\x2|{\x3\x2\x2\x2}~"+
		"\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x32\x3\x2\x2\x2\x80\x81"+
		"\av\x2\x2\x81\x82\at\x2\x2\x82\x83\aw\x2\x2\x83\x8A\ag\x2\x2\x84\x85\a"+
		"h\x2\x2\x85\x86\a\x63\x2\x2\x86\x87\an\x2\x2\x87\x88\au\x2\x2\x88\x8A"+
		"\ag\x2\x2\x89\x80\x3\x2\x2\x2\x89\x84\x3\x2\x2\x2\x8A\x34\x3\x2\x2\x2"+
		"\x8B\x90\a$\x2\x2\x8C\x8F\x5\x37\x1C\x2\x8D\x8F\v\x2\x2\x2\x8E\x8C\x3"+
		"\x2\x2\x2\x8E\x8D\x3\x2\x2\x2\x8F\x92\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2"+
		"\x90\x8E\x3\x2\x2\x2\x91\x93\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x93\x94\a"+
		"$\x2\x2\x94\x36\x3\x2\x2\x2\x95\x96\a^\x2\x2\x96\x9A\a$\x2\x2\x97\x98"+
		"\a^\x2\x2\x98\x9A\a^\x2\x2\x99\x95\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x9A"+
		"\x38\x3\x2\x2\x2\x9B\x9D\t\x3\x2\x2\x9C\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2"+
		"\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F:\x3\x2\x2\x2\xA0\xA1"+
		"\t\x4\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA3\b\x1E\x2\x2\xA3<\x3\x2\x2\x2\t"+
		"\x2~\x89\x8E\x90\x99\x9E\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Kitten
